import { useEffect } from "react";

function Timer() {
  // 화면에 처음 렌더링 됐을 때 한 번만 타이머 작동시킴
  useEffect(() => {
    const timer = setInterval(() => {
      console.log('타이머 실행 중...');
    }, 1000);

    // 뒷정리 함수, useEffect 함수 내에서
    // 화면에서 타이머가 사라질 때 타이머 기능을 정리하기
    return () => {
      clearInterval(timer);
      console.log('타이머 종료!');
    };
  }, []);

  // 리액트 엘리먼트를 보여주는 리턴값이고
  // 12번줄에 return은 useEffect() 콜백 함수 내에 return이다
  return (
    <div>
      <span>🕐타이머가 시작 됐습니다!</span>   {/* window + . : 이모지 나옴 */}
    </div>
  );
}

export default Timer;

// 값을 다시 쓰기 위해 저장하는 거기 때문에 남용하게 되면, 역으로 성능이 안좋아 질 수 있음!
// 연산량이 많을 때만 쓰는 걸 권장
// 언제 쓸까?? 앱에서 지도위에 검색 결과를 띄우는 앱인데, 검색결과를 지도에 한 번에 띄울 때 버벅거림을 없애기 위해 사용될 수 있음 예) 내 근처 스타벅스
// 잘 쓰지는 않음
// const 변수면 = useMemo(값 생성 함수, 의존성 배열);
// 의존성 배열에 들어있는 변수가 변했을 경우에만 새로 값 생성 함수를 호출하여 결과값을 반환함
// 그렇지 않은 경우에는 기존 함수의 결과값을 그대로 반환함
// 의존성 배열을 넣지 않을 경우 렌더링이 일어날 때마다 매번 값 생성
// 함수가 실행되므로 의미가 없음