1. 타입스크립트란?
마이크로소프트에서 만들었다
Javascript는 문법이 매우 유연한 동적타입 언어다. (= 변수 선언 시 자료형을 정의할 필요가 없음. 데이터를 넣을 때 자동으로 타입[숫자, 글자, 불리언...등]이 정해진다)
TypeScript는 문법이 매우 엄격한 정적 타입 언어(=변수 선언 시 자료형을 미리 지정)
TypeScript = Javascript + Type 문법이 추가된 Javascript Supperset(상위집합) =(TypeScript에서 Javascript문법을 사용할 수 있음)
타입스크립트는 새로운 언어가 아님,
자바스크립트의 타입부분을 업그레이드해서 사용하고 싶을 때 설치해서 쓰는 것이다.

2. 타입스크립트 쓰는 이유?
1) JS는 매우 유연하고 다른 자료형의 값도 수용할 수 있기 때문에, 코드가 혼란스러워 지고 버그가 발생하기 쉬움
언뜻 편해보이지만 프로젝트의 규모가 복잡하고 커질수록 언어의 유연성은 점점 단점으로 작용(안돼야 하는데 되어버려서 잠재적 오류 발생 가능성이 올라감)

예1) 
JS는 매우 유연한 동적타입 언어이기에 아래 연산이 가능
10 - '5'   [숫자 - 문자]   // JS가 알아서 숫자로 바꾸고 연산함
결과값 숫자 5 나옴

TS는 타입을 엄격하게 검사함
(정적 타입 언어는 숫자 - 숫자만 가능)
10 - '5'   // TS 에러 발생

예2)
function getUserById(userId) { 
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}

Q: 여기서 userId는 숫자로 넘겨줘야 할까요? 문자열로 넘겨줘야 할까요?
- 함수 선언만 봐서는 알 수 없다.. 함수를 호출하는 다른 코드 일부를 봐야 명확해짐

하지만 TS를 사용한다면
function getUserById(userId: number) {   //  userId는 number라고 지정함
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}
userId가 숫자 타입인 것을 알 수 있고, 문자열을 넘겨주면 에러가 발생함
함수 선언만 봐도 코드가 명확해짐

2) 엄격한 타입 체크로 인한 부가적인 효과
TS는 에러메세지가 디테일하고 자동완성 기능이 강력함

3. 타입스크립트 설치
npm install -g typescript
- g : 글로벌, 전역 설치 (모든 데이터에 설치시켜줌)

4. tsconfig.json 작성(타입스크립트 설정)

5. .ts 파일에 코딩 시작

6. 브라우저는 TypeScript를 이해하지 못하기 때문에 일반 JS 로 트랜스파일(변환)해야됨
.js 파일로 변환하는 명령어
tsc -w
tsc는 TypeScript Compiler, -w 는 watch모드 옵션으로 켜두면 타입스크립트 파일을 저장할 때마다 자동 변환됨
일반 JS 로 번역되어 .js 파일이 자동 생성됨

7. 번역된 .js 파일을 열어보면 name: string 코드는 컴파일 과정에서 제거됨
이렇게 TS에서 자료형을 명시하면 디버깅하고 잠재적 오류를 줄이는데 도움이 되고, 최종적으로는 동일한 JS  코드가 생성됨